import { UIName, UIInfo, AssetBundleEnum, AudioType, ConfigType, Enum_ShowAdType } from "../modules/EnumDef";
import { Util } from "./Util";
import { ResManager } from "./ResManager";
import PopUpItemBase from "../modules/popup/PopUpItemBase";
import { ConfigManager } from "../modules/Manager/ConfigManager";
import { TBDATA_UIAdvertisement } from "../modules/tableData/TBDATA_UIAdvertisement";
import { SDKManager } from "../SDK/SDKManager";
import IViewBase from "../modules/ui/IViewBase";
import { GameSetting } from "../Def/GameSetting";


class ViewData {
    modName: UIName
    node: cc.Node
    show: boolean
    load: boolean
    ani: cc.Animation
    viewBaseComp: IViewBase
    constructor(modName: UIName) {
        this.modName = modName
        this.show = false
        this.load = false
    }

    PlayAni(num: number, cb: Function) {
        if (this.ani) {
            this.ani.off(cc.Animation.EventType.FINISHED)
            let aniState = this.ani.getClips()
            if (num == 0) {
                if (aniState[0]) {
                    this.node.scale = 0
                    cc.tween(this.node)
                        .delay(0.01)
                        .call(() => {
                            this.ani.play(aniState[num].name)
                            this.ani.once(cc.Animation.EventType.FINISHED, () => {
                                if (cb) {
                                    cb()
                                }
                            })
                        }).start()
                } else {
                    if (cb) {
                        cb()
                    }
                }
            } else {
                if (aniState[num]) {
                    this.ani.play(aniState[num].name)
                    this.ani.once(cc.Animation.EventType.FINISHED, () => {
                        if (cb) {
                            cb()
                        }
                    })
                } else {
                    if (cb) {
                        cb()
                    }
                }
            }
        } else {
            if (cb) {
                cb()
            }
        }
    }
}

class _UIManager {

    private _ViewMap: ViewData[] = [];
    private UIRoot: cc.Node;
    private PopLayer: cc.Node;
    private PopItem: cc.Node;
    private PopItemPool: cc.NodePool;

    /**存储打开的界面数组 */
    private openViewName: UIName[] = [];
    private adCfg: Object;

    Notif(constModName: UIName, uiInfo: UIInfo, body: any = null) {
        if (uiInfo == UIInfo.ShowView) {
            if (!this.openViewName.includes(constModName)) {
                this.openViewName.push(constModName);
                this.openViewName.sort((a, b) => { return a - b; });
            }
        }

        let viewData = this.getViewData(constModName)
        if (viewData.node == null) {
            if (uiInfo == UIInfo.ShowView) {
                viewData.show = true
                this.LoadView(viewData, body)
                return
            }
        } else {
            viewData.node.emit(UIInfo.UIEvent, uiInfo, body)
            if (uiInfo == UIInfo.ShowView) {
                viewData.show = true
                viewData.node.active = true
                viewData.node.pauseSystemEvents(true)
                viewData.PlayAni(0, () => {
                    viewData.node.resumeSystemEvents(true)
                })

                viewData.viewBaseComp.onChangeLanguage();
<<<<<<< HEAD
                this.showAdByUIName(constModName);
=======
                viewData.viewBaseComp.onChangeOrientation(GameSetting.ORIENTATION);
>>>>>>> a42bea8 (同步：横竖屏修改)
            } else if (uiInfo == UIInfo.CloseView) {
                let spliceIdx = this.openViewName.indexOf(constModName);
                this.openViewName.splice(spliceIdx, 1);

                this.closeAdByUIName(constModName);

                viewData.node.stopAllActions()
                viewData.node.pauseSystemEvents(true)
                viewData.PlayAni(1, () => {
                    viewData.show = false
                    viewData.node.active = false

                    for (let i = this.openViewName.length - 1; i >= 0; i--) {
                        let viewName = this.openViewName[i];
                        if (this.showAdByUIName(viewName)) {
                            break;
                        }
                    }
                })
            }
        }
    }

    NotifAll(uiInfo: UIInfo, body: any = null) {
        for (let x = 0; x < this._ViewMap.length; x++) {
            this.Notif(this._ViewMap[x].modName, uiInfo, body)
        }
    }

    OpenUI(modName: UIName) {
        this.Notif(modName, UIInfo.ShowView)
    }

    CloseUI(modName: UIName) {
        this.Notif(modName, UIInfo.CloseView)
    }
    RefreshUI(modName: UIName) {
        this.Notif(modName, UIInfo.RefreshView)
    }

    private getViewData(constModName: UIName): ViewData {
        for (let x = 0; x < this._ViewMap.length; x++) {
            const element = this._ViewMap[x];
            if (element.modName == constModName) {
                return element
            }
        }
        let viewData = new ViewData(constModName)
        this._ViewMap.push(viewData)
        return viewData
    }

    private async LoadView(viewData: ViewData, body: any) {
        if (viewData.load) { return }
        if (viewData.node == null) {
            viewData.load = true
            let prefab = await Util.Res.LoadAssetRes<cc.Prefab>(AssetBundleEnum.ui, UIName[viewData.modName])
            viewData.load = false
            viewData.node = cc.instantiate(prefab);
        }
        this.AddChild(viewData);
        if (!viewData.show) { return }
        this.Notif(viewData.modName, UIInfo.ShowView, body)
    }


    public InitUILayer(root: cc.Node, popNode: cc.Node) {
        this.UIRoot = root
        this.PopLayer = popNode;
        this.PopItem = popNode.children[0];
        this.PopItemPool = new cc.NodePool();
    }


    private AddChild(viewData: ViewData) {
        viewData.node.parent = this.UIRoot
        viewData.node.position = cc.Vec3.ZERO;
        viewData.node.active = viewData.show
        viewData.node.zIndex = viewData.modName
        viewData.ani = viewData.node.getComponent(cc.Animation)
        let widget = viewData.node.getComponent(cc.Widget)
        if (widget) {
            widget.updateAlignment()
            widget.enabled = false
        }
        let data = viewData.node.getComponent(UIName[viewData.modName])
        viewData.viewBaseComp = data;
        console.log('Add', UIName[viewData.modName])
        if (data == null) { console.log("UI   " + UIName[viewData.modName] + "上不含同名脚本"); console.log(viewData.node); return }
        if (data.notif == null) { console.log(UIName[viewData.modName] + "未实现notif方法"); return }
        viewData.node.on(UIInfo.UIEvent, (uiinfo: UIInfo, body: any = null) => { data.notif(uiinfo, body) }, this);
        for (const key in data) {
            if (Object.prototype.hasOwnProperty.call(data, key)) {
                const element = data[key];
                if (element instanceof cc.Button) {
                    this.ChangeBtnSound(element, AudioType.按钮点击)
                }
                if (element instanceof Array) {
                    for (let x = 0; x < element.length; x++) {
                        const btn = element[x];
                        if (btn instanceof cc.Button) {
                            this.ChangeBtnSound(btn, AudioType.按钮点击)
                        } else {
                            break
                        }
                    }
                }
                if (element instanceof cc.Node) {
                    let btn = element.getComponent(cc.Button);
                    if (btn) {
                        this.ChangeBtnSound(btn, AudioType.按钮点击)
                    }
                }
            }
        }
    }
    ChangeBtnSound(btnStart: cc.Button, audioType: AudioType) {
        let boolContain = false
        for (let x = 0; x < btnStart.clickEvents.length; x++) {
            const element = btnStart.clickEvents[x];
            if (element.component == "Main" && element.target == this.UIRoot.parent && element.handler == "PlayEffect") {
                boolContain = true
                element.customEventData = audioType
            }
        }
        if (!boolContain) {
            var eventHandler = new cc.Component.EventHandler();
            eventHandler.target = this.UIRoot.parent;
            eventHandler.component = "Main";
            eventHandler.handler = "PlayEffect";
            eventHandler.customEventData = audioType;
            btnStart.clickEvents.push(eventHandler)
        }

    }

    /**显示弹窗 */
    ShowToast(content: string, duration: number = 2) {
        let node = this.PopItemPool.get();
        if (node == null) {
            node = cc.instantiate(this.PopItem);
        }
        let item = node.getComponent(PopUpItemBase);
        item.show(content, duration);
        node.active = true;
        node.setParent(this.PopLayer);
    }

    /**回收弹窗 */
    RecoverToast(item: PopUpItemBase) {
        item.recover();
        this.PopItemPool.put(item.node);
    }

    /*------------------广告 ------------------- */
    private showAdByUIName(constModName: UIName) {
        if (!this.adCfg) {
            this.adCfg = ConfigManager.GetConfigByType(ConfigType.Table_UIAdvertisement);
            if (!this.adCfg) {
                console.log("uiAdv Config error");
                return false;
            }
        }
        console.log("showAdByUIName ");

        let showAdResult: boolean = false;
        //处理广告
        let adJsonData: TBDATA_UIAdvertisement = this.adCfg[UIName[constModName]];
        console.log(`${UIName[constModName]}的广告配置`, adJsonData);
        if (adJsonData) {
            let adType = adJsonData.ShowAdType as any;
            let adParam = adJsonData.ShowAdParam as any;
            for (let i = 0; i < adType.length; i++) {
                console.log("show ad " + adType[i]);

                if (adJsonData.CtrlAdOnlineParam[i] && adJsonData.CtrlAdOnlineParam[i] != "") {//当前广告受在线参数影响

                    let onlineValue = SDKManager.GetOnlineValue(adJsonData.CtrlAdOnlineParam[i]);
                    console.log(`onlineValue     ${adJsonData.CtrlAdOnlineParam[i]}:${onlineValue}`);
                    if (onlineValue && Number(onlineValue) == 1) {
                        this.showAd(adType[i], adParam[i]);
                        showAdResult = true;
                    }
                }
                else {//当前广告不受在线参数影响
                    this.showAd(adType[i], adParam[i]);
                    showAdResult = true;
                }
            }


        }

        return showAdResult;
    }

    private showAd(type: Enum_ShowAdType, param: []) {
        if (type == Enum_ShowAdType.Custom) {
            if (param == null) {
                console.error("param is error");
                return;
            }

            for (let p of param) {
                SDKManager.ShowCustomAd(p);
            }
        }
        else if (type == Enum_ShowAdType.Banner) {
            SDKManager.ShowBanner();
        }
        else if (type == Enum_ShowAdType.Insert) {
            SDKManager.ShowInsert();
        }
        else if (type == Enum_ShowAdType.HideAllAD) {
            SDKManager.CloseAllCustomAd();
            SDKManager.CloseBanner();
        }


    }

    private closeAdByUIName(constModName: UIName) {
        console.log("closeAdByUIName ", constModName);
        if (!this.adCfg) {
            console.log("no uiAd config");

            return;
        }
        //处理广告
        let adJsonData: TBDATA_UIAdvertisement = this.adCfg[UIName[constModName]];
        if (adJsonData) {
            let adType = adJsonData.ShowAdType as any;
            let adParam = adJsonData.ShowAdParam as any;
            for (let i = 0; i < adType.length; i++) {
                this.hideAd(adType[i], adParam[i]);
            }
        }
    }

    private hideAd(type: Enum_ShowAdType, param: []) {
        if (type == Enum_ShowAdType.Custom) {
            for (let p of param) {
                SDKManager.CloseCustomAd(p);
            }
        }
        else if (type == Enum_ShowAdType.Banner) {
            SDKManager.CloseBanner();
        }
    }
}

export const UIManager = new _UIManager()
